Design critique:
The provider's animator was designed very well. The interfaces given to use were pretty flexible
and easy to use. There didn't seem to be too tight of coupling taking place between the interfaces
and classes. The purpose of each method and class was clear. Their design was
also concise and easy to understand. There were some aspects of the design that wasn't very clear
and at some points were a little ambiguous that it needed clarification. These issues will be
discussed in a another section.

Implementation critique:
All the implementation was fully working and functioning. The views was able to perform every
required feature. It also implemented some additional features like a clear animation button,
which wipes the entire animation, and a clear shape button, which removes all keyframes from a
selected shape. It also included an "Animation Text" button, so that they user of our program can
see an updated textual view of the animation at all times.

 Documentation:
 Every method, class, and interface was properly documented. Each documentation was clear concise.
 The code itself didn't have any extra comments or clarification, but it was clearly written.

Design/code limitations and suggestions:
One implementation that was confusing was how time or shape ID was tied to a shape or shape state.
That was not clear or documented anywhere. The time was meant to be independent of a shape state
but this was a bit confusing since a big aspect of the state of the shape is the time or tick
that is taking place. A suggestion would be to somehow represent the time of a shape state within
the ShapeState class, either as a field itself or as another class. Something else that was unclear
was how the buttons were handled. There was no documentation, and though the buttons were
initialized in their editor view class, it was difficult implementing them to do the desired
actions.


